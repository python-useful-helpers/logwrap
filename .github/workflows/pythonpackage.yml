name: Python package

on:
  push:
    branches-ignore:
      - 'dependabot/**'
  pull_request: {}

jobs:
  PEP8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade -r flake8_requirements.txt
      - name: Lint with flake8
        run: |
          flake8 logwrap

  PyLint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade "pylint >= 2.6.0" perflint
      - name: Install develop
        run: |
          pip install -e .
      - name: Lint with PyLint
        run: |
          pylint logwrap

  MyPy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade "mypy >= 0.790" rich
      - name: Install develop
        run: |
          pip install -e .
      - name: Lint with MyPy
        run: |
          mypy --strict logwrap

  Black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade black regex
      - name: Check code style with black
        run: |
          black --check logwrap
  Metadata:
    name: Validate metadata
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade twine build
      - name: Build package
        run: |
          python -m build -s
      - name: Validate metadata
        run: |
          twine check dist/*

  Test:
    needs: [PEP8, PyLint, MyPy, Black, Metadata]  # isort is broken
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 6
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    name: "Script based python ${{ matrix.python-version }} on ${{ matrix.os }}"
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install --upgrade -r pytest_requirements.txt
      - name: Install develop
        run: |
          pip install -e .
      - name: Test with pytest
        run: |
          py.test --cov-report= --cov=logwrap test
          coverage report -m --fail-under 85
      - name: Coveralls Parallel
        uses: coverallsapp/github-action@v2
        with:
          flag-name: run-${{ matrix.python-version }}-${{ matrix.os }}"
          parallel: true

  UploadCoverage:
    name: Upload coverage to Coveralls
    needs: [ Test ]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@v2
        with:
          parallel-finished: true

  Build:
    needs: [ Test ]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # need for setuptools_scm
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade twine build
      - name: Build package
        run: |
          python -m build
      - uses: actions/upload-artifact@v3
        with:
          path: dist/*

  Deploy:
      needs: [Build]
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      runs-on: ubuntu-latest
      environment:
        name: pypi
        url: https://pypi.org/p/logwrap
      permissions:
        id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
      steps:
        - uses: actions/download-artifact@v3
          with:
            # unpacks default artifact into dist/
            # if `name: artifact` is omitted, the action will create extra parent dir
            name: artifact
            path: dist
        - name: Publish package distributions to PyPI
          uses: pypa/gh-action-pypi-publish@release/v1
